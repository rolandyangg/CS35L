Roland Yang 506053914

1.1)
8. Yes you can use the C-s command which is search in emacs
9. No I did not move the cursor using arrow keys

///////////////////////////////////////////////////////

1.2)

///////////////////////////////////////////////////////

1.3)
6. It is the chinese character han. Unicode ISO10646 

///////////////////////////////////////////////////////

1.4)

8. It found 6 instances of <ol>

///////////////////////////////////////////////////////

1.5)

1.)
which sh -> /usr/bin/sh
which sleep -> /usr/local/cs/bin/sleep
which type -> /usr/bin/type

2.)
ls | grep -x "se." -> sed seq
sed -> Allows you to edit text in a scriptable manner
seq -> Creates a sequence of numbers

3.)
readlink -f /usr/local/cs/bin/emacs -> /usr/local/cs/emacs-28.2/bin/emacs-28.2

4.)
/usr/bin/gcc --version -> 8.5.0 20210514 (Red Hat 8.5.0-10)
gcc --version -> 12.2.0

They are different programs so there is consistency between the compiler versions everyone is running on their code on the servers at UCLA; so when you test your code on the servers, you're using the same compiler as the grading system. (answer from LA in class)

5.)
u+sx o-w in the context of the chmod command means
grant user setuid mode and execution permissions
remove owner write permissions

6.)
find /usr/local/cs -type d -mtime -14 | sort | head -10

/usr/local/cs
/usr/local/cs/findutils-4.9.0
/usr/local/cs/findutils-4.9.0/bin
/usr/local/cs/findutils-4.9.0/libexec
/usr/local/cs/findutils-4.9.0/share
/usr/local/cs/findutils-4.9.0/share/info
/usr/local/cs/findutils-4.9.0/share/locale
/usr/local/cs/findutils-4.9.0/share/locale/be
/usr/local/cs/findutils-4.9.0/share/locale/be/LC_MESSAGES
/usr/local/cs/findutils-4.9.0/share/locale/bg

7.)
find /usr/bin/ -type l | wc -l

259 (on lnxsrv13)

8.)
find /usr/lib64 -maxdepth 1 -printf '%T+ %p\n' | sort | head -n 1

libbz2.so
8/12/2018

9.)
C-t (transpose characters)
M-t (transpose words)
C-x C-t (transpose lines)
C-M-t (transpose sexps)

10.)
The yank function acts like a "copy-paste" mechanism, in which it inserts the most recent kill.

It can easily be invoked with C-y

11.)
emacs <file> C-x d /usr/bin
ls -l

emacs dired accounts for more files compared to ls -l
(ex. emacs dired shows "." and "..", aka the parent directories)

12.)
ps -efjH --forest

This will display a list of processes, from which you can find your own login shell's process, all the processes ancestors, and all its descendants.

To figure out ALL ancestors follow your PPID of the login shell until you reach the root.
For descendants follow the process whose PPID is your login shell, then search for the process whose PPID is that process's ID, repeat until cannot find further.

Alternatively you could use:
ps --forest -fu <username>

if you know the name of username of your login process. This will avoid displaying EVERYTHING and instead only display processes related to your UID. Then you could follow the PPID to the root.

Another alternative (used in extra credit script) is
ps -p $$
and
ps --ppid $$ 
then following that until you hit process 0 or it doesn't return anything.

EXTRA CREDIT SCRIPT IN FOLDER

///////////////////////////////////////////////////////

1.6)

///////////////////////////////////////////////////////

Homework: Scripting in the Shell)
tr -c 'A-Za-z' '[\n*]' -> replaces anything that is not an english alphabet character with a newline
tr -cs 'A-Za-z' '[\n*]' -> compresses series of identical characters into a single character (same as before but no repeating newlines)
tr -cs 'A-Za-z' '[\n*]' | sort -> takes the previous output then sorts it
tr -cs 'A-Za-z' '[\n*]' | sort -u -> same as before but removes repeated words
tr -cs 'A-Za-z' '[\n*]' | sort -u | comm - sorted.words -> 3 column output, words unique to file 1, words unique to file 2, then words in common in 3
tr -cs 'A-Za-z' '[\n*]' | sort -u | comm -23 - sorted.words -> prints all the words found in the first file (suppress 2 and 3)

Per various Piazza instructor responses, the spellchecker should not have to modify the inner logic of the command.
Therefore my solution does not involve modifying the inner logic of the command.
Instead my solution consists of processing the linux.words commands above into a dictionary which has punctuation removed and then compares that dictionary against other processed files using comm. 